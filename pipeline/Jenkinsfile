pipeline {
environment { // Declaration of environment variables
DOCKER_ID = "amarbahri" // replace this with your docker-id
DOCKER_MOVIE_IMAGE = "moviefastapi"
DOCKER_CAST_IMAGE = "castfastapi"
DOCKER_TAG = "v.${BUILD_ID}.0" 
}
agent any // Jenkins will be able to select all available agents
stages {
        stage('Build images'){ // docker build images
            steps {
                script {
                sh '''
                docker build $DOCKER_ID/$DOCKER_MOVIE_IMAGE  ./movie-service/ && \
                sleep 6 && \
                docker tag $DOCKER_ID/$DOCKER_MOVIE_IMAGE $DOCKER_ID/$DOCKER_MOVIE_IMAGE:$DOCKER_TAG
                '''
                }
            
                script {
                sh '''
                docker build  $DOCKER_ID/$DOCKER_CAST_IMAGE  ./cast-service/ && \
                sleep 6 && \
                docker tag $DOCKER_ID/$DOCKER_CAST_IMAGE $DOCKER_ID/$DOCKER_CAST_IMAGE:$DOCKER_TAG
                '''
                }
            }
        }
        stage('Docker run'){ // run container from our builded image
                environment {
                  DATABASE_MOVIE_URI = "DATABASE_URI=postgresql://movie_db_username:movie_db_password@movie_db/movie_db_dev"
                  CAST_SERVICE_HOST_URL= "CAST_SERVICE_HOST_URL=http://cast_service:8000/api/v1/casts/"
                  DATABASE_CAST_URI = "DATABASE_URI=postgresql://cast_db_username:cast_db_password@cast_db/cast_db_dev"
                  POSTGRES_MOVIE_USER = "POSTGRES_USER=movie_db_username"
                  POSTGRES_MOVIE_PASSWORD = "POSTGRES_PASSWORD=movie_db_password"
                  POSTGRES_MOVIE_DB = "POSTGRES_DB=movie_db_dev"
                  POSTGRES_CAST_USER = "POSTGRES_USER=cast_db_username"
                  POSTGRES_CAST_PASSWORD = "POSTGRES_PASSWORD=cast_db_password"
                  POSTGRES_CAST_DB = "POSTGRES_DB=cast_db_dev"
                }
                steps {
                    script {
                        sh '''
                        docker network create jenkins-pipeline
                        '''
                    }
                    script {
                        sh '''
                        docker run -d --name cast_db -e ${POSTGRES_CAST_USER} -e ${POSTGRES_CAST_PASSWORD} -e ${POSTGRES_CAST_DB} \
                               --network jenkins-pipeline postgres:12.1-alpine
                        '''
                    }
                    script {
                        sh '''
                        docker run -d --name movie_db -e ${POSTGRES_MOVIE_USER} -e ${POSTGRES_MOVIE_PASSWORD} -e ${POSTGRES_MOVIE_DB} \
                               --network jenkins-pipeline postgres:12.1-alpine
                        '''
                    }
                    script {
                    sh '''
                    docker run -d -p 8001:8000 --name cast_service -e ${DATABASE_CAST_URI} --network jenkins-pipeline \
                           $DOCKER_ID/$DOCKER_CAST_IMAGE:$DOCKER_TAG 
                    sleep 10
                    '''
                    }
                
                    script {
                    sh '''
                    docker run  -d -p 8002:8000 --name movie_service -e ${DATABASE_MOVIE_URI} -e ${CAST_SERVICE_HOST_URL} --network jenkins-pipeline \
                           $DOCKER_ID/$DOCKER_MOVIE_IMAGE:$DOCKER_TAG
                    sleep 10
                    '''
                    }
                }
            }

        stage('Test Acceptance'){ // we launch the curl command to validate that the container responds to the request
            steps {
                    script {
                    sh '''
                    curl localhost:8001
                    '''
                    }
                    script {
                    sh '''
                    curl localhost:8002
                    '''
                    }
            }

        }
        stage('Docker Push'){ //we pass the built image to our docker hub account
            environment
            {
                DOCKER_PASS = credentials("DOCKER_HUB_PASS") 
            }

            steps {

                script {
                sh '''
                echo "push To DockerHub and tag latest"
                docker login -u $DOCKER_ID -p $DOCKER_PASS
                docker push -a $DOCKER_ID/$DOCKER_MOVIE_IMAGE
                docker push -a $DOCKER_ID/$DOCKER_CAST_IMAGE 
                '''
                }
            }

        }

stage('Deploiement en dev'){
        environment
        {
        KUBECONFIG = credentials("k3sconfig") 
        }
            steps {
                script {
                sh '''
                rm -Rf .kube
                mkdir .kube
                ls
                cat $KUBECONFIG > .kube/config
                helm upgrade --install castmovieapi deployExamen --set version.cast=$DOCKER_TAG --set version.movie=$DOCKER_TAG --values=deployExamen/values-dev.yaml --namespace dev
                '''
                }
            }

        }
stage('Deploiement en staging'){
        environment
        {
        KUBECONFIG = credentials("k3sconfig") 
        }
            steps {
                script {
                sh '''
                rm -Rf .kube
                mkdir .kube
                ls
                cat $KUBECONFIG > .kube/config
                helm upgrade --install castmovieapi deployExamen --set version.cast=$DOCKER_TAG --set version.movie=$DOCKER_TAG --values=deployExamen/values-stg.yaml --namespace staging
                '''
                }
            }

        }
  stage('Deploiement en prod'){
         when {
                branch 'master'
            }
        environment
        {
        KUBECONFIG = credentials("k3sconfig") 
        }
            steps {
            // need confirm to deploy prod
                    timeout(time: 15, unit: "MINUTES") {
                        input message: 'Do you want to deploy in production ?', ok: 'Yes'
                    }

                script {
                sh '''
                rm -Rf .kube
                mkdir .kube
                ls
                cat $KUBECONFIG > .kube/config
                helm upgrade --install castmovieapi deployExamen --set version.cast=$DOCKER_TAG --set version.movie=$DOCKER_TAG --values=deployExamen/values-prod.yaml --namespace prod
                '''
                }
            }

        }

}
  post('Cleanup') {
    always {
        script {
            sh '''
            docker stop movie_service cast_service movie_db cast_db && \
            docker rm movie_service cast_service movie_db cast_db && \
            docker network rm jenkins-pipeline
            docker rmi -f $DOCKER_ID/$DOCKER_MOVIE_IMAGE:$DOCKER_TAG $DOCKER_ID/$DOCKER_CAST_IMAGE:$DOCKER_TAG \
                   $DOCKER_ID/$DOCKER_MOVIE_IMAGE:latest $DOCKER_ID/$DOCKER_CAST_IMAGE:latest
            '''
        }
    }
  }
}